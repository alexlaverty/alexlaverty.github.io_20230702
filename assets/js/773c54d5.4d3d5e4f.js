"use strict";(self.webpackChunkalexlaverty_github_io=self.webpackChunkalexlaverty_github_io||[]).push([[8045],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>y});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},c=Object.keys(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(a=0;a<c.length;a++)t=c[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},l=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},f=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=p(t),f=r,y=u["".concat(i,".").concat(f)]||u[f]||d[f]||c;return t?a.createElement(y,s(s({ref:n},l),{},{components:t})):a.createElement(y,s({ref:n},l))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var c=t.length,s=new Array(c);s[0]=f;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o[u]="string"==typeof e?e:r,s[1]=o;for(var p=2;p<c;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},6241:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const c={},s="AWS TypeScript SDK Examples",o={unversionedId:"Tech/AWS Typescript SDK",id:"Tech/AWS Typescript SDK",title:"AWS TypeScript SDK Examples",description:"Pass different values for the instance type to the script for each environment",source:"@site/docs/Tech/AWS Typescript SDK.md",sourceDirName:"Tech",slug:"/Tech/AWS Typescript SDK",permalink:"/docs/Tech/AWS Typescript SDK",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Tech/AWS Typescript SDK.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tech",permalink:"/docs/category/tech"},next:{title:"Abinitio",permalink:"/docs/Tech/Abinitio"}},i={},p=[{value:"Pass different values for the instance type to the script for each environment",id:"pass-different-values-for-the-instance-type-to-the-script-for-each-environment",level:2}],l={toc:p};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"aws-typescript-sdk-examples"},"AWS TypeScript SDK Examples"),(0,r.kt)("h2",{id:"pass-different-values-for-the-instance-type-to-the-script-for-each-environment"},"Pass different values for the instance type to the script for each environment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import * as cdk from 'aws-cdk-lib';\nimport * as ec2 from 'aws-cdk-lib/aws-ec2';\nimport * as rds from 'aws-cdk-lib/aws-rds';\nimport * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2';\n\nclass MyStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props: { instanceType: ec2.InstanceType },) {\n    super(scope, id, props);\n\n    // EC2 Instance 1\n    const instance1 = new ec2.Instance(this, 'Instance1', {\n      instanceType: props.instanceType,\n      machineImage: new ec2.AmazonLinuxImage()\n    });\n\n    // EC2 Instance 2\n    const instance2 = new ec2.Instance(this, 'Instance2', {\n      instanceType: props.instanceType,\n      machineImage: new ec2.AmazonLinuxImage()\n    });\n\n    // RDS Database\n    const database = new rds.DatabaseInstance(this, 'Database', {\n      engine: rds.DatabaseInstanceEngine.POSTGRES,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO)\n    });\n\n    // Load Balancer\n    const loadBalancer = new elbv2.LoadBalancer(this, 'LoadBalancer', {\n      vpc: instance1.vpc,\n      internetFacing: true\n    });\n    loadBalancer.addTarget(instance1);\n    loadBalancer.addTarget(instance2);\n\n    // Allow incoming traffic from the EC2 instances to the RDS database\n    instance1.connections.allowFrom(database, ec2.Port.tcp(5432));\n    instance2.connections.allowFrom(database, ec2.Port.tcp(5432));\n  }\n}\n\nconst app = new cdk.App();\n\nconst devEnv = { account: '123456789101', region: 'us-west-2' };\nnew MyStack(app, 'MyStackDev', {\n  env: devEnv,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MICRO),\n});\n\nconst testEnv = { account: '123456789102', region: 'us-west-2' };\nnew MyStack(app, 'MyStackTest', {\n  env: testEnv,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.SMALL),\n});\n\nconst prodEnv = { account: '123456789103', region: 'us-west-2' };\nnew MyStack(app, 'MyStackProd', {\n  env: prodEnv,\n  instanceType: ec2.InstanceType.of(ec2.InstanceClass.T2, ec2.InstanceSize.MEDIUM),\n});\n\napp.synth();\n")))}u.isMDXComponent=!0}}]);